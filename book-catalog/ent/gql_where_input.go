// Code generated by ent, DO NOT EDIT.

package ent

import (
	"book-catalog/ent/author"
	"book-catalog/ent/book"
	"book-catalog/ent/predicate"
	"errors"
	"fmt"
	"time"
)

// AuthorWhereInput represents a where input for filtering Author queries.
type AuthorWhereInput struct {
	Predicates []predicate.Author  `json:"-"`
	Not        *AuthorWhereInput   `json:"not,omitempty"`
	Or         []*AuthorWhereInput `json:"or,omitempty"`
	And        []*AuthorWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "books" edge predicates.
	HasBooks     *bool             `json:"hasBooks,omitempty"`
	HasBooksWith []*BookWhereInput `json:"hasBooksWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *AuthorWhereInput) AddPredicates(predicates ...predicate.Author) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the AuthorWhereInput filter on the AuthorQuery builder.
func (i *AuthorWhereInput) Filter(q *AuthorQuery) (*AuthorQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyAuthorWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyAuthorWhereInput is returned in case the AuthorWhereInput is empty.
var ErrEmptyAuthorWhereInput = errors.New("ent: empty predicate AuthorWhereInput")

// P returns a predicate for filtering authors.
// An error is returned if the input is empty or invalid.
func (i *AuthorWhereInput) P() (predicate.Author, error) {
	var predicates []predicate.Author
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, author.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Author, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, author.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Author, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, author.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, author.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, author.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, author.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, author.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, author.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, author.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, author.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, author.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, author.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, author.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, author.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, author.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, author.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, author.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, author.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, author.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, author.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, author.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, author.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, author.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, author.NameContainsFold(*i.NameContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, author.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, author.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, author.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, author.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, author.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, author.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, author.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, author.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, author.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, author.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, author.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, author.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, author.EmailContainsFold(*i.EmailContainsFold))
	}

	if i.HasBooks != nil {
		p := author.HasBooks()
		if !*i.HasBooks {
			p = author.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBooksWith) > 0 {
		with := make([]predicate.Book, 0, len(i.HasBooksWith))
		for _, w := range i.HasBooksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBooksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, author.HasBooksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyAuthorWhereInput
	case 1:
		return predicates[0], nil
	default:
		return author.And(predicates...), nil
	}
}

// BookWhereInput represents a where input for filtering Book queries.
type BookWhereInput struct {
	Predicates []predicate.Book  `json:"-"`
	Not        *BookWhereInput   `json:"not,omitempty"`
	Or         []*BookWhereInput `json:"or,omitempty"`
	And        []*BookWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "genre" field predicates.
	Genre             *string  `json:"genre,omitempty"`
	GenreNEQ          *string  `json:"genreNEQ,omitempty"`
	GenreIn           []string `json:"genreIn,omitempty"`
	GenreNotIn        []string `json:"genreNotIn,omitempty"`
	GenreGT           *string  `json:"genreGT,omitempty"`
	GenreGTE          *string  `json:"genreGTE,omitempty"`
	GenreLT           *string  `json:"genreLT,omitempty"`
	GenreLTE          *string  `json:"genreLTE,omitempty"`
	GenreContains     *string  `json:"genreContains,omitempty"`
	GenreHasPrefix    *string  `json:"genreHasPrefix,omitempty"`
	GenreHasSuffix    *string  `json:"genreHasSuffix,omitempty"`
	GenreEqualFold    *string  `json:"genreEqualFold,omitempty"`
	GenreContainsFold *string  `json:"genreContainsFold,omitempty"`

	// "publication_date" field predicates.
	PublicationDate             *string  `json:"publicationDate,omitempty"`
	PublicationDateNEQ          *string  `json:"publicationDateNEQ,omitempty"`
	PublicationDateIn           []string `json:"publicationDateIn,omitempty"`
	PublicationDateNotIn        []string `json:"publicationDateNotIn,omitempty"`
	PublicationDateGT           *string  `json:"publicationDateGT,omitempty"`
	PublicationDateGTE          *string  `json:"publicationDateGTE,omitempty"`
	PublicationDateLT           *string  `json:"publicationDateLT,omitempty"`
	PublicationDateLTE          *string  `json:"publicationDateLTE,omitempty"`
	PublicationDateContains     *string  `json:"publicationDateContains,omitempty"`
	PublicationDateHasPrefix    *string  `json:"publicationDateHasPrefix,omitempty"`
	PublicationDateHasSuffix    *string  `json:"publicationDateHasSuffix,omitempty"`
	PublicationDateEqualFold    *string  `json:"publicationDateEqualFold,omitempty"`
	PublicationDateContainsFold *string  `json:"publicationDateContainsFold,omitempty"`

	// "isbn" field predicates.
	Isbn             *string  `json:"isbn,omitempty"`
	IsbnNEQ          *string  `json:"isbnNEQ,omitempty"`
	IsbnIn           []string `json:"isbnIn,omitempty"`
	IsbnNotIn        []string `json:"isbnNotIn,omitempty"`
	IsbnGT           *string  `json:"isbnGT,omitempty"`
	IsbnGTE          *string  `json:"isbnGTE,omitempty"`
	IsbnLT           *string  `json:"isbnLT,omitempty"`
	IsbnLTE          *string  `json:"isbnLTE,omitempty"`
	IsbnContains     *string  `json:"isbnContains,omitempty"`
	IsbnHasPrefix    *string  `json:"isbnHasPrefix,omitempty"`
	IsbnHasSuffix    *string  `json:"isbnHasSuffix,omitempty"`
	IsbnEqualFold    *string  `json:"isbnEqualFold,omitempty"`
	IsbnContainsFold *string  `json:"isbnContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "author" edge predicates.
	HasAuthor     *bool               `json:"hasAuthor,omitempty"`
	HasAuthorWith []*AuthorWhereInput `json:"hasAuthorWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *BookWhereInput) AddPredicates(predicates ...predicate.Book) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the BookWhereInput filter on the BookQuery builder.
func (i *BookWhereInput) Filter(q *BookQuery) (*BookQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyBookWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyBookWhereInput is returned in case the BookWhereInput is empty.
var ErrEmptyBookWhereInput = errors.New("ent: empty predicate BookWhereInput")

// P returns a predicate for filtering books.
// An error is returned if the input is empty or invalid.
func (i *BookWhereInput) P() (predicate.Book, error) {
	var predicates []predicate.Book
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, book.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Book, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, book.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Book, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, book.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, book.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, book.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, book.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, book.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, book.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, book.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, book.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, book.IDLTE(*i.IDLTE))
	}
	if i.Title != nil {
		predicates = append(predicates, book.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, book.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, book.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, book.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, book.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, book.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, book.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, book.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, book.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, book.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, book.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, book.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, book.TitleContainsFold(*i.TitleContainsFold))
	}
	if i.Genre != nil {
		predicates = append(predicates, book.GenreEQ(*i.Genre))
	}
	if i.GenreNEQ != nil {
		predicates = append(predicates, book.GenreNEQ(*i.GenreNEQ))
	}
	if len(i.GenreIn) > 0 {
		predicates = append(predicates, book.GenreIn(i.GenreIn...))
	}
	if len(i.GenreNotIn) > 0 {
		predicates = append(predicates, book.GenreNotIn(i.GenreNotIn...))
	}
	if i.GenreGT != nil {
		predicates = append(predicates, book.GenreGT(*i.GenreGT))
	}
	if i.GenreGTE != nil {
		predicates = append(predicates, book.GenreGTE(*i.GenreGTE))
	}
	if i.GenreLT != nil {
		predicates = append(predicates, book.GenreLT(*i.GenreLT))
	}
	if i.GenreLTE != nil {
		predicates = append(predicates, book.GenreLTE(*i.GenreLTE))
	}
	if i.GenreContains != nil {
		predicates = append(predicates, book.GenreContains(*i.GenreContains))
	}
	if i.GenreHasPrefix != nil {
		predicates = append(predicates, book.GenreHasPrefix(*i.GenreHasPrefix))
	}
	if i.GenreHasSuffix != nil {
		predicates = append(predicates, book.GenreHasSuffix(*i.GenreHasSuffix))
	}
	if i.GenreEqualFold != nil {
		predicates = append(predicates, book.GenreEqualFold(*i.GenreEqualFold))
	}
	if i.GenreContainsFold != nil {
		predicates = append(predicates, book.GenreContainsFold(*i.GenreContainsFold))
	}
	if i.PublicationDate != nil {
		predicates = append(predicates, book.PublicationDateEQ(*i.PublicationDate))
	}
	if i.PublicationDateNEQ != nil {
		predicates = append(predicates, book.PublicationDateNEQ(*i.PublicationDateNEQ))
	}
	if len(i.PublicationDateIn) > 0 {
		predicates = append(predicates, book.PublicationDateIn(i.PublicationDateIn...))
	}
	if len(i.PublicationDateNotIn) > 0 {
		predicates = append(predicates, book.PublicationDateNotIn(i.PublicationDateNotIn...))
	}
	if i.PublicationDateGT != nil {
		predicates = append(predicates, book.PublicationDateGT(*i.PublicationDateGT))
	}
	if i.PublicationDateGTE != nil {
		predicates = append(predicates, book.PublicationDateGTE(*i.PublicationDateGTE))
	}
	if i.PublicationDateLT != nil {
		predicates = append(predicates, book.PublicationDateLT(*i.PublicationDateLT))
	}
	if i.PublicationDateLTE != nil {
		predicates = append(predicates, book.PublicationDateLTE(*i.PublicationDateLTE))
	}
	if i.PublicationDateContains != nil {
		predicates = append(predicates, book.PublicationDateContains(*i.PublicationDateContains))
	}
	if i.PublicationDateHasPrefix != nil {
		predicates = append(predicates, book.PublicationDateHasPrefix(*i.PublicationDateHasPrefix))
	}
	if i.PublicationDateHasSuffix != nil {
		predicates = append(predicates, book.PublicationDateHasSuffix(*i.PublicationDateHasSuffix))
	}
	if i.PublicationDateEqualFold != nil {
		predicates = append(predicates, book.PublicationDateEqualFold(*i.PublicationDateEqualFold))
	}
	if i.PublicationDateContainsFold != nil {
		predicates = append(predicates, book.PublicationDateContainsFold(*i.PublicationDateContainsFold))
	}
	if i.Isbn != nil {
		predicates = append(predicates, book.IsbnEQ(*i.Isbn))
	}
	if i.IsbnNEQ != nil {
		predicates = append(predicates, book.IsbnNEQ(*i.IsbnNEQ))
	}
	if len(i.IsbnIn) > 0 {
		predicates = append(predicates, book.IsbnIn(i.IsbnIn...))
	}
	if len(i.IsbnNotIn) > 0 {
		predicates = append(predicates, book.IsbnNotIn(i.IsbnNotIn...))
	}
	if i.IsbnGT != nil {
		predicates = append(predicates, book.IsbnGT(*i.IsbnGT))
	}
	if i.IsbnGTE != nil {
		predicates = append(predicates, book.IsbnGTE(*i.IsbnGTE))
	}
	if i.IsbnLT != nil {
		predicates = append(predicates, book.IsbnLT(*i.IsbnLT))
	}
	if i.IsbnLTE != nil {
		predicates = append(predicates, book.IsbnLTE(*i.IsbnLTE))
	}
	if i.IsbnContains != nil {
		predicates = append(predicates, book.IsbnContains(*i.IsbnContains))
	}
	if i.IsbnHasPrefix != nil {
		predicates = append(predicates, book.IsbnHasPrefix(*i.IsbnHasPrefix))
	}
	if i.IsbnHasSuffix != nil {
		predicates = append(predicates, book.IsbnHasSuffix(*i.IsbnHasSuffix))
	}
	if i.IsbnEqualFold != nil {
		predicates = append(predicates, book.IsbnEqualFold(*i.IsbnEqualFold))
	}
	if i.IsbnContainsFold != nil {
		predicates = append(predicates, book.IsbnContainsFold(*i.IsbnContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, book.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, book.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, book.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, book.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, book.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, book.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, book.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, book.CreatedAtLTE(*i.CreatedAtLTE))
	}

	if i.HasAuthor != nil {
		p := book.HasAuthor()
		if !*i.HasAuthor {
			p = book.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAuthorWith) > 0 {
		with := make([]predicate.Author, 0, len(i.HasAuthorWith))
		for _, w := range i.HasAuthorWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAuthorWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, book.HasAuthorWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyBookWhereInput
	case 1:
		return predicates[0], nil
	default:
		return book.And(predicates...), nil
	}
}
